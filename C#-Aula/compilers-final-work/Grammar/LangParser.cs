//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Lang.g4 by ANTLR 4.7.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Grammar {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7.2")]
[System.CLSCompliant(false)]
public partial class LangParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, SEP=4, OE=5, CE=6, OB=7, CB=8, AT=9, PLUS=10, 
		MINUS=11, MULT=12, DIV=13, AND=14, OR=15, NOT=16, EQ=17, LT=18, GT=19, 
		LE=20, GE=21, NE=22, BOOL_TRUE=23, BOL_FALSE=24, FUNCTION=25, RETURN=26, 
		IF=27, WHILE=28, DO=29, FOR=30, THEN=31, ELSE=32, WRITE=33, READ=34, STR=35, 
		EOL=36, NUM=37, VAR=38, COMMENT=39, WS=40;
	public const int
		RULE_prog = 0, RULE_functions = 1, RULE_function = 2, RULE_fnBlock = 3, 
		RULE_fnBody = 4, RULE_params = 5, RULE_funcInvoc = 6, RULE_line = 7, RULE_stmt = 8, 
		RULE_input = 9, RULE_output = 10, RULE_ifst = 11, RULE_whilest = 12, RULE_forst = 13, 
		RULE_block = 14, RULE_cond = 15, RULE_atrib = 16, RULE_tipo = 17, RULE_expr = 18, 
		RULE_term = 19, RULE_factor = 20;
	public static readonly string[] ruleNames = {
		"prog", "functions", "function", "fnBlock", "fnBody", "params", "funcInvoc", 
		"line", "stmt", "input", "output", "ifst", "whilest", "forst", "block", 
		"cond", "atrib", "tipo", "expr", "term", "factor"
	};

	private static readonly string[] _LiteralNames = {
		null, "'texto'", "'numero'", "'boleano'", "','", "'('", "')'", "'{'", 
		"'}'", "'='", "'+'", "'-'", "'*'", "'/'", "'&&'", "'||'", "'!'", "'=='", 
		"'<'", "'>'", "'<='", "'>='", "'!='", "'true'", "'false'", null, null, 
		null, null, null, null, null, null, null, null, null, "';'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, "SEP", "OE", "CE", "OB", "CB", "AT", "PLUS", "MINUS", 
		"MULT", "DIV", "AND", "OR", "NOT", "EQ", "LT", "GT", "LE", "GE", "NE", 
		"BOOL_TRUE", "BOL_FALSE", "FUNCTION", "RETURN", "IF", "WHILE", "DO", "FOR", 
		"THEN", "ELSE", "WRITE", "READ", "STR", "EOL", "NUM", "VAR", "COMMENT", 
		"WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Lang.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static LangParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public LangParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public LangParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}
	public partial class ProgContext : ParserRuleContext {
		public ProgContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_prog; } }
	 
		public ProgContext() { }
		public virtual void CopyFrom(ProgContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ProgLineContext : ProgContext {
		public FunctionsContext functions() {
			return GetRuleContext<FunctionsContext>(0);
		}
		public LineContext[] line() {
			return GetRuleContexts<LineContext>();
		}
		public LineContext line(int i) {
			return GetRuleContext<LineContext>(i);
		}
		public ProgLineContext(ProgContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ILangListener typedListener = listener as ILangListener;
			if (typedListener != null) typedListener.EnterProgLine(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILangListener typedListener = listener as ILangListener;
			if (typedListener != null) typedListener.ExitProgLine(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILangVisitor<TResult> typedVisitor = visitor as ILangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgLine(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgContext prog() {
		ProgContext _localctx = new ProgContext(Context, State);
		EnterRule(_localctx, 0, RULE_prog);
		int _la;
		try {
			_localctx = new ProgLineContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 42; functions();
			State = 44;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 43; line();
				}
				}
				State = 46;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__1) | (1L << T__2) | (1L << IF) | (1L << WHILE) | (1L << DO) | (1L << FOR) | (1L << WRITE) | (1L << EOL) | (1L << VAR))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionsContext : ParserRuleContext {
		public FunctionContext function() {
			return GetRuleContext<FunctionContext>(0);
		}
		public FunctionsContext functions() {
			return GetRuleContext<FunctionsContext>(0);
		}
		public FunctionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functions; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILangListener typedListener = listener as ILangListener;
			if (typedListener != null) typedListener.EnterFunctions(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILangListener typedListener = listener as ILangListener;
			if (typedListener != null) typedListener.ExitFunctions(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILangVisitor<TResult> typedVisitor = visitor as ILangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctions(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionsContext functions() {
		FunctionsContext _localctx = new FunctionsContext(Context, State);
		EnterRule(_localctx, 2, RULE_functions);
		try {
			State = 52;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case FUNCTION:
				EnterOuterAlt(_localctx, 1);
				{
				State = 48; function();
				State = 49; functions();
				}
				break;
			case T__0:
			case T__1:
			case T__2:
			case IF:
			case WHILE:
			case DO:
			case FOR:
			case WRITE:
			case EOL:
			case VAR:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionContext : ParserRuleContext {
		public ITerminalNode FUNCTION() { return GetToken(LangParser.FUNCTION, 0); }
		public ITerminalNode VAR() { return GetToken(LangParser.VAR, 0); }
		public ITerminalNode OE() { return GetToken(LangParser.OE, 0); }
		public ParamsContext @params() {
			return GetRuleContext<ParamsContext>(0);
		}
		public ITerminalNode CE() { return GetToken(LangParser.CE, 0); }
		public FnBlockContext fnBlock() {
			return GetRuleContext<FnBlockContext>(0);
		}
		public FunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILangListener typedListener = listener as ILangListener;
			if (typedListener != null) typedListener.EnterFunction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILangListener typedListener = listener as ILangListener;
			if (typedListener != null) typedListener.ExitFunction(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILangVisitor<TResult> typedVisitor = visitor as ILangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionContext function() {
		FunctionContext _localctx = new FunctionContext(Context, State);
		EnterRule(_localctx, 4, RULE_function);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 54; Match(FUNCTION);
			State = 55; Match(VAR);
			State = 56; Match(OE);
			State = 57; @params();
			State = 58; Match(CE);
			State = 59; fnBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FnBlockContext : ParserRuleContext {
		public FnBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fnBlock; } }
	 
		public FnBlockContext() { }
		public virtual void CopyFrom(FnBlockContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class FnBlockLineContext : FnBlockContext {
		public ITerminalNode OB() { return GetToken(LangParser.OB, 0); }
		public FnBodyContext fnBody() {
			return GetRuleContext<FnBodyContext>(0);
		}
		public ITerminalNode CB() { return GetToken(LangParser.CB, 0); }
		public FnBlockLineContext(FnBlockContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ILangListener typedListener = listener as ILangListener;
			if (typedListener != null) typedListener.EnterFnBlockLine(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILangListener typedListener = listener as ILangListener;
			if (typedListener != null) typedListener.ExitFnBlockLine(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILangVisitor<TResult> typedVisitor = visitor as ILangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFnBlockLine(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FnBlockContext fnBlock() {
		FnBlockContext _localctx = new FnBlockContext(Context, State);
		EnterRule(_localctx, 6, RULE_fnBlock);
		try {
			_localctx = new FnBlockLineContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 61; Match(OB);
			State = 62; fnBody();
			State = 63; Match(CB);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FnBodyContext : ParserRuleContext {
		public FnBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fnBody; } }
	 
		public FnBodyContext() { }
		public virtual void CopyFrom(FnBodyContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class FnReturnLineContext : FnBodyContext {
		public ITerminalNode RETURN() { return GetToken(LangParser.RETURN, 0); }
		public ITerminalNode EOL() { return GetToken(LangParser.EOL, 0); }
		public FnReturnLineContext(FnBodyContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ILangListener typedListener = listener as ILangListener;
			if (typedListener != null) typedListener.EnterFnReturnLine(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILangListener typedListener = listener as ILangListener;
			if (typedListener != null) typedListener.ExitFnReturnLine(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILangVisitor<TResult> typedVisitor = visitor as ILangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFnReturnLine(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FnBodyLineContext : FnBodyContext {
		public LineContext line() {
			return GetRuleContext<LineContext>(0);
		}
		public FnBodyLineContext(FnBodyContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ILangListener typedListener = listener as ILangListener;
			if (typedListener != null) typedListener.EnterFnBodyLine(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILangListener typedListener = listener as ILangListener;
			if (typedListener != null) typedListener.ExitFnBodyLine(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILangVisitor<TResult> typedVisitor = visitor as ILangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFnBodyLine(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FnReturnExprLineContext : FnBodyContext {
		public ITerminalNode RETURN() { return GetToken(LangParser.RETURN, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode EOL() { return GetToken(LangParser.EOL, 0); }
		public FnReturnExprLineContext(FnBodyContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ILangListener typedListener = listener as ILangListener;
			if (typedListener != null) typedListener.EnterFnReturnExprLine(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILangListener typedListener = listener as ILangListener;
			if (typedListener != null) typedListener.ExitFnReturnExprLine(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILangVisitor<TResult> typedVisitor = visitor as ILangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFnReturnExprLine(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FnBodyLineMoreContext : FnBodyContext {
		public LineContext line() {
			return GetRuleContext<LineContext>(0);
		}
		public FnBodyContext fnBody() {
			return GetRuleContext<FnBodyContext>(0);
		}
		public FnBodyLineMoreContext(FnBodyContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ILangListener typedListener = listener as ILangListener;
			if (typedListener != null) typedListener.EnterFnBodyLineMore(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILangListener typedListener = listener as ILangListener;
			if (typedListener != null) typedListener.ExitFnBodyLineMore(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILangVisitor<TResult> typedVisitor = visitor as ILangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFnBodyLineMore(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FnBodyContext fnBody() {
		FnBodyContext _localctx = new FnBodyContext(Context, State);
		EnterRule(_localctx, 8, RULE_fnBody);
		try {
			State = 75;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
			case 1:
				_localctx = new FnBodyLineContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 65; line();
				}
				break;
			case 2:
				_localctx = new FnBodyLineMoreContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 66; line();
				State = 67; fnBody();
				}
				break;
			case 3:
				_localctx = new FnReturnExprLineContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 69; Match(RETURN);
				State = 70; expr();
				State = 71; Match(EOL);
				}
				break;
			case 4:
				_localctx = new FnReturnLineContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 73; Match(RETURN);
				State = 74; Match(EOL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParamsContext : ParserRuleContext {
		public ITerminalNode VAR() { return GetToken(LangParser.VAR, 0); }
		public ITerminalNode SEP() { return GetToken(LangParser.SEP, 0); }
		public ParamsContext @params() {
			return GetRuleContext<ParamsContext>(0);
		}
		public ParamsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_params; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILangListener typedListener = listener as ILangListener;
			if (typedListener != null) typedListener.EnterParams(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILangListener typedListener = listener as ILangListener;
			if (typedListener != null) typedListener.ExitParams(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILangVisitor<TResult> typedVisitor = visitor as ILangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParams(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParamsContext @params() {
		ParamsContext _localctx = new ParamsContext(Context, State);
		EnterRule(_localctx, 10, RULE_params);
		try {
			State = 82;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 77; Match(VAR);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 78; Match(VAR);
				State = 79; Match(SEP);
				State = 80; @params();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FuncInvocContext : ParserRuleContext {
		public FuncInvocContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_funcInvoc; } }
	 
		public FuncInvocContext() { }
		public virtual void CopyFrom(FuncInvocContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class FuncInvocLineContext : FuncInvocContext {
		public ITerminalNode VAR() { return GetToken(LangParser.VAR, 0); }
		public ITerminalNode OE() { return GetToken(LangParser.OE, 0); }
		public ParamsContext @params() {
			return GetRuleContext<ParamsContext>(0);
		}
		public ITerminalNode CE() { return GetToken(LangParser.CE, 0); }
		public FuncInvocLineContext(FuncInvocContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ILangListener typedListener = listener as ILangListener;
			if (typedListener != null) typedListener.EnterFuncInvocLine(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILangListener typedListener = listener as ILangListener;
			if (typedListener != null) typedListener.ExitFuncInvocLine(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILangVisitor<TResult> typedVisitor = visitor as ILangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncInvocLine(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FuncInvocContext funcInvoc() {
		FuncInvocContext _localctx = new FuncInvocContext(Context, State);
		EnterRule(_localctx, 12, RULE_funcInvoc);
		try {
			_localctx = new FuncInvocLineContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 84; Match(VAR);
			State = 85; Match(OE);
			State = 86; @params();
			State = 87; Match(CE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LineContext : ParserRuleContext {
		public LineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_line; } }
	 
		public LineContext() { }
		public virtual void CopyFrom(LineContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class LineWhileContext : LineContext {
		public WhilestContext whilest() {
			return GetRuleContext<WhilestContext>(0);
		}
		public LineWhileContext(LineContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ILangListener typedListener = listener as ILangListener;
			if (typedListener != null) typedListener.EnterLineWhile(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILangListener typedListener = listener as ILangListener;
			if (typedListener != null) typedListener.ExitLineWhile(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILangVisitor<TResult> typedVisitor = visitor as ILangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLineWhile(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LineEOLContext : LineContext {
		public ITerminalNode EOL() { return GetToken(LangParser.EOL, 0); }
		public LineEOLContext(LineContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ILangListener typedListener = listener as ILangListener;
			if (typedListener != null) typedListener.EnterLineEOL(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILangListener typedListener = listener as ILangListener;
			if (typedListener != null) typedListener.ExitLineEOL(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILangVisitor<TResult> typedVisitor = visitor as ILangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLineEOL(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LineStmtContext : LineContext {
		public StmtContext stmt() {
			return GetRuleContext<StmtContext>(0);
		}
		public ITerminalNode EOL() { return GetToken(LangParser.EOL, 0); }
		public LineStmtContext(LineContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ILangListener typedListener = listener as ILangListener;
			if (typedListener != null) typedListener.EnterLineStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILangListener typedListener = listener as ILangListener;
			if (typedListener != null) typedListener.ExitLineStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILangVisitor<TResult> typedVisitor = visitor as ILangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLineStmt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LineIfContext : LineContext {
		public IfstContext ifst() {
			return GetRuleContext<IfstContext>(0);
		}
		public LineIfContext(LineContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ILangListener typedListener = listener as ILangListener;
			if (typedListener != null) typedListener.EnterLineIf(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILangListener typedListener = listener as ILangListener;
			if (typedListener != null) typedListener.ExitLineIf(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILangVisitor<TResult> typedVisitor = visitor as ILangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLineIf(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LineForContext : LineContext {
		public ForstContext forst() {
			return GetRuleContext<ForstContext>(0);
		}
		public LineForContext(LineContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ILangListener typedListener = listener as ILangListener;
			if (typedListener != null) typedListener.EnterLineFor(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILangListener typedListener = listener as ILangListener;
			if (typedListener != null) typedListener.ExitLineFor(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILangVisitor<TResult> typedVisitor = visitor as ILangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLineFor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LineContext line() {
		LineContext _localctx = new LineContext(Context, State);
		EnterRule(_localctx, 14, RULE_line);
		try {
			State = 96;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__0:
			case T__1:
			case T__2:
			case WRITE:
			case VAR:
				_localctx = new LineStmtContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 89; stmt();
				State = 90; Match(EOL);
				}
				break;
			case IF:
				_localctx = new LineIfContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 92; ifst();
				}
				break;
			case WHILE:
			case DO:
				_localctx = new LineWhileContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 93; whilest();
				}
				break;
			case FOR:
				_localctx = new LineForContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 94; forst();
				}
				break;
			case EOL:
				_localctx = new LineEOLContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 95; Match(EOL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StmtContext : ParserRuleContext {
		public StmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stmt; } }
	 
		public StmtContext() { }
		public virtual void CopyFrom(StmtContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class StmtOutputContext : StmtContext {
		public OutputContext output() {
			return GetRuleContext<OutputContext>(0);
		}
		public StmtOutputContext(StmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ILangListener typedListener = listener as ILangListener;
			if (typedListener != null) typedListener.EnterStmtOutput(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILangListener typedListener = listener as ILangListener;
			if (typedListener != null) typedListener.ExitStmtOutput(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILangVisitor<TResult> typedVisitor = visitor as ILangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStmtOutput(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StmtInputContext : StmtContext {
		public InputContext input() {
			return GetRuleContext<InputContext>(0);
		}
		public StmtInputContext(StmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ILangListener typedListener = listener as ILangListener;
			if (typedListener != null) typedListener.EnterStmtInput(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILangListener typedListener = listener as ILangListener;
			if (typedListener != null) typedListener.ExitStmtInput(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILangVisitor<TResult> typedVisitor = visitor as ILangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStmtInput(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StmtAtribContext : StmtContext {
		public AtribContext atrib() {
			return GetRuleContext<AtribContext>(0);
		}
		public StmtAtribContext(StmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ILangListener typedListener = listener as ILangListener;
			if (typedListener != null) typedListener.EnterStmtAtrib(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILangListener typedListener = listener as ILangListener;
			if (typedListener != null) typedListener.ExitStmtAtrib(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILangVisitor<TResult> typedVisitor = visitor as ILangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStmtAtrib(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LineFuncInvocContext : StmtContext {
		public FuncInvocContext funcInvoc() {
			return GetRuleContext<FuncInvocContext>(0);
		}
		public LineFuncInvocContext(StmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ILangListener typedListener = listener as ILangListener;
			if (typedListener != null) typedListener.EnterLineFuncInvoc(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILangListener typedListener = listener as ILangListener;
			if (typedListener != null) typedListener.ExitLineFuncInvoc(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILangVisitor<TResult> typedVisitor = visitor as ILangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLineFuncInvoc(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StmtContext stmt() {
		StmtContext _localctx = new StmtContext(Context, State);
		EnterRule(_localctx, 16, RULE_stmt);
		try {
			State = 108;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,5,Context) ) {
			case 1:
				_localctx = new StmtAtribContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 98; atrib();
				Console.WriteLine("Atribuição reconhecida\n");
				}
				break;
			case 2:
				_localctx = new StmtInputContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 101; input();
				Console.WriteLine("Input reconhecido\n");
				}
				break;
			case 3:
				_localctx = new StmtOutputContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 104; output();
				Console.WriteLine("Output reconhecida\n");
				}
				break;
			case 4:
				_localctx = new LineFuncInvocContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 107; funcInvoc();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InputContext : ParserRuleContext {
		public InputContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_input; } }
	 
		public InputContext() { }
		public virtual void CopyFrom(InputContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class InputReadContext : InputContext {
		public TipoContext tipo() {
			return GetRuleContext<TipoContext>(0);
		}
		public ITerminalNode READ() { return GetToken(LangParser.READ, 0); }
		public ITerminalNode VAR() { return GetToken(LangParser.VAR, 0); }
		public InputReadContext(InputContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ILangListener typedListener = listener as ILangListener;
			if (typedListener != null) typedListener.EnterInputRead(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILangListener typedListener = listener as ILangListener;
			if (typedListener != null) typedListener.ExitInputRead(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILangVisitor<TResult> typedVisitor = visitor as ILangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInputRead(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InputContext input() {
		InputContext _localctx = new InputContext(Context, State);
		EnterRule(_localctx, 18, RULE_input);
		try {
			_localctx = new InputReadContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 110; tipo();
			State = 111; Match(READ);
			State = 112; Match(VAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OutputContext : ParserRuleContext {
		public OutputContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_output; } }
	 
		public OutputContext() { }
		public virtual void CopyFrom(OutputContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class OutputWriteStrContext : OutputContext {
		public ITerminalNode WRITE() { return GetToken(LangParser.WRITE, 0); }
		public ITerminalNode STR() { return GetToken(LangParser.STR, 0); }
		public OutputWriteStrContext(OutputContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ILangListener typedListener = listener as ILangListener;
			if (typedListener != null) typedListener.EnterOutputWriteStr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILangListener typedListener = listener as ILangListener;
			if (typedListener != null) typedListener.ExitOutputWriteStr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILangVisitor<TResult> typedVisitor = visitor as ILangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOutputWriteStr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class OutputWriteVarContext : OutputContext {
		public ITerminalNode WRITE() { return GetToken(LangParser.WRITE, 0); }
		public ITerminalNode VAR() { return GetToken(LangParser.VAR, 0); }
		public OutputWriteVarContext(OutputContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ILangListener typedListener = listener as ILangListener;
			if (typedListener != null) typedListener.EnterOutputWriteVar(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILangListener typedListener = listener as ILangListener;
			if (typedListener != null) typedListener.ExitOutputWriteVar(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILangVisitor<TResult> typedVisitor = visitor as ILangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOutputWriteVar(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class OutputWriteExprContext : OutputContext {
		public ITerminalNode WRITE() { return GetToken(LangParser.WRITE, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public OutputWriteExprContext(OutputContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ILangListener typedListener = listener as ILangListener;
			if (typedListener != null) typedListener.EnterOutputWriteExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILangListener typedListener = listener as ILangListener;
			if (typedListener != null) typedListener.ExitOutputWriteExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILangVisitor<TResult> typedVisitor = visitor as ILangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOutputWriteExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OutputContext output() {
		OutputContext _localctx = new OutputContext(Context, State);
		EnterRule(_localctx, 20, RULE_output);
		try {
			State = 120;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,6,Context) ) {
			case 1:
				_localctx = new OutputWriteVarContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 114; Match(WRITE);
				State = 115; Match(VAR);
				}
				break;
			case 2:
				_localctx = new OutputWriteStrContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 116; Match(WRITE);
				State = 117; Match(STR);
				}
				break;
			case 3:
				_localctx = new OutputWriteExprContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 118; Match(WRITE);
				State = 119; expr();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfstContext : ParserRuleContext {
		public IfstContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifst; } }
	 
		public IfstContext() { }
		public virtual void CopyFrom(IfstContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class IfstIfElseContext : IfstContext {
		public BlockContext b1;
		public BlockContext b2;
		public ITerminalNode IF() { return GetToken(LangParser.IF, 0); }
		public ITerminalNode OE() { return GetToken(LangParser.OE, 0); }
		public CondContext cond() {
			return GetRuleContext<CondContext>(0);
		}
		public ITerminalNode CE() { return GetToken(LangParser.CE, 0); }
		public ITerminalNode THEN() { return GetToken(LangParser.THEN, 0); }
		public ITerminalNode ELSE() { return GetToken(LangParser.ELSE, 0); }
		public BlockContext[] block() {
			return GetRuleContexts<BlockContext>();
		}
		public BlockContext block(int i) {
			return GetRuleContext<BlockContext>(i);
		}
		public IfstIfElseContext(IfstContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ILangListener typedListener = listener as ILangListener;
			if (typedListener != null) typedListener.EnterIfstIfElse(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILangListener typedListener = listener as ILangListener;
			if (typedListener != null) typedListener.ExitIfstIfElse(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILangVisitor<TResult> typedVisitor = visitor as ILangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfstIfElse(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IfstIfContext : IfstContext {
		public ITerminalNode IF() { return GetToken(LangParser.IF, 0); }
		public ITerminalNode OE() { return GetToken(LangParser.OE, 0); }
		public CondContext cond() {
			return GetRuleContext<CondContext>(0);
		}
		public ITerminalNode CE() { return GetToken(LangParser.CE, 0); }
		public ITerminalNode THEN() { return GetToken(LangParser.THEN, 0); }
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public IfstIfContext(IfstContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ILangListener typedListener = listener as ILangListener;
			if (typedListener != null) typedListener.EnterIfstIf(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILangListener typedListener = listener as ILangListener;
			if (typedListener != null) typedListener.ExitIfstIf(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILangVisitor<TResult> typedVisitor = visitor as ILangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfstIf(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfstContext ifst() {
		IfstContext _localctx = new IfstContext(Context, State);
		EnterRule(_localctx, 22, RULE_ifst);
		try {
			State = 138;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
			case 1:
				_localctx = new IfstIfContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 122; Match(IF);
				State = 123; Match(OE);
				State = 124; cond(0);
				State = 125; Match(CE);
				State = 126; Match(THEN);
				State = 127; block();
				}
				break;
			case 2:
				_localctx = new IfstIfElseContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 129; Match(IF);
				State = 130; Match(OE);
				State = 131; cond(0);
				State = 132; Match(CE);
				State = 133; Match(THEN);
				State = 134; ((IfstIfElseContext)_localctx).b1 = block();
				State = 135; Match(ELSE);
				State = 136; ((IfstIfElseContext)_localctx).b2 = block();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhilestContext : ParserRuleContext {
		public WhilestContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whilest; } }
	 
		public WhilestContext() { }
		public virtual void CopyFrom(WhilestContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class WhilestDoWhileContext : WhilestContext {
		public ITerminalNode DO() { return GetToken(LangParser.DO, 0); }
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ITerminalNode WHILE() { return GetToken(LangParser.WHILE, 0); }
		public ITerminalNode OE() { return GetToken(LangParser.OE, 0); }
		public CondContext cond() {
			return GetRuleContext<CondContext>(0);
		}
		public ITerminalNode CE() { return GetToken(LangParser.CE, 0); }
		public WhilestDoWhileContext(WhilestContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ILangListener typedListener = listener as ILangListener;
			if (typedListener != null) typedListener.EnterWhilestDoWhile(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILangListener typedListener = listener as ILangListener;
			if (typedListener != null) typedListener.ExitWhilestDoWhile(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILangVisitor<TResult> typedVisitor = visitor as ILangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhilestDoWhile(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class WhilestWhileContext : WhilestContext {
		public ITerminalNode WHILE() { return GetToken(LangParser.WHILE, 0); }
		public ITerminalNode OE() { return GetToken(LangParser.OE, 0); }
		public CondContext cond() {
			return GetRuleContext<CondContext>(0);
		}
		public ITerminalNode CE() { return GetToken(LangParser.CE, 0); }
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public WhilestWhileContext(WhilestContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ILangListener typedListener = listener as ILangListener;
			if (typedListener != null) typedListener.EnterWhilestWhile(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILangListener typedListener = listener as ILangListener;
			if (typedListener != null) typedListener.ExitWhilestWhile(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILangVisitor<TResult> typedVisitor = visitor as ILangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhilestWhile(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhilestContext whilest() {
		WhilestContext _localctx = new WhilestContext(Context, State);
		EnterRule(_localctx, 24, RULE_whilest);
		try {
			State = 153;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case WHILE:
				_localctx = new WhilestWhileContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 140; Match(WHILE);
				State = 141; Match(OE);
				State = 142; cond(0);
				State = 143; Match(CE);
				State = 144; block();
				}
				break;
			case DO:
				_localctx = new WhilestDoWhileContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 146; Match(DO);
				State = 147; block();
				State = 148; Match(WHILE);
				State = 149; Match(OE);
				State = 150; cond(0);
				State = 151; Match(CE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForstContext : ParserRuleContext {
		public ForstContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forst; } }
	 
		public ForstContext() { }
		public virtual void CopyFrom(ForstContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ForstForContext : ForstContext {
		public ITerminalNode FOR() { return GetToken(LangParser.FOR, 0); }
		public ITerminalNode OE() { return GetToken(LangParser.OE, 0); }
		public ITerminalNode[] EOL() { return GetTokens(LangParser.EOL); }
		public ITerminalNode EOL(int i) {
			return GetToken(LangParser.EOL, i);
		}
		public ITerminalNode CE() { return GetToken(LangParser.CE, 0); }
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public AtribContext[] atrib() {
			return GetRuleContexts<AtribContext>();
		}
		public AtribContext atrib(int i) {
			return GetRuleContext<AtribContext>(i);
		}
		public CondContext cond() {
			return GetRuleContext<CondContext>(0);
		}
		public ForstForContext(ForstContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ILangListener typedListener = listener as ILangListener;
			if (typedListener != null) typedListener.EnterForstFor(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILangListener typedListener = listener as ILangListener;
			if (typedListener != null) typedListener.ExitForstFor(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILangVisitor<TResult> typedVisitor = visitor as ILangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForstFor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForstContext forst() {
		ForstContext _localctx = new ForstContext(Context, State);
		EnterRule(_localctx, 26, RULE_forst);
		int _la;
		try {
			_localctx = new ForstForContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 155; Match(FOR);
			State = 156; Match(OE);
			State = 158;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__1) | (1L << T__2))) != 0)) {
				{
				State = 157; atrib();
				}
			}

			State = 160; Match(EOL);
			State = 162;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << OE) | (1L << NOT) | (1L << NUM) | (1L << VAR))) != 0)) {
				{
				State = 161; cond(0);
				}
			}

			State = 164; Match(EOL);
			State = 166;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__1) | (1L << T__2))) != 0)) {
				{
				State = 165; atrib();
				}
			}

			State = 168; Match(CE);
			State = 169; block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
	 
		public BlockContext() { }
		public virtual void CopyFrom(BlockContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class BlockLineContext : BlockContext {
		public ITerminalNode OB() { return GetToken(LangParser.OB, 0); }
		public ITerminalNode CB() { return GetToken(LangParser.CB, 0); }
		public LineContext[] line() {
			return GetRuleContexts<LineContext>();
		}
		public LineContext line(int i) {
			return GetRuleContext<LineContext>(i);
		}
		public BlockLineContext(BlockContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ILangListener typedListener = listener as ILangListener;
			if (typedListener != null) typedListener.EnterBlockLine(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILangListener typedListener = listener as ILangListener;
			if (typedListener != null) typedListener.ExitBlockLine(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILangVisitor<TResult> typedVisitor = visitor as ILangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlockLine(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(Context, State);
		EnterRule(_localctx, 28, RULE_block);
		int _la;
		try {
			_localctx = new BlockLineContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 171; Match(OB);
			State = 173;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 172; line();
				}
				}
				State = 175;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__1) | (1L << T__2) | (1L << IF) | (1L << WHILE) | (1L << DO) | (1L << FOR) | (1L << WRITE) | (1L << EOL) | (1L << VAR))) != 0) );
			State = 177; Match(CB);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CondContext : ParserRuleContext {
		public CondContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cond; } }
	 
		public CondContext() { }
		public virtual void CopyFrom(CondContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class CondRelopContext : CondContext {
		public ExprContext e1;
		public IToken RELOP;
		public ExprContext e2;
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode EQ() { return GetToken(LangParser.EQ, 0); }
		public ITerminalNode NE() { return GetToken(LangParser.NE, 0); }
		public ITerminalNode LT() { return GetToken(LangParser.LT, 0); }
		public ITerminalNode GT() { return GetToken(LangParser.GT, 0); }
		public ITerminalNode LE() { return GetToken(LangParser.LE, 0); }
		public ITerminalNode GE() { return GetToken(LangParser.GE, 0); }
		public CondRelopContext(CondContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ILangListener typedListener = listener as ILangListener;
			if (typedListener != null) typedListener.EnterCondRelop(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILangListener typedListener = listener as ILangListener;
			if (typedListener != null) typedListener.ExitCondRelop(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILangVisitor<TResult> typedVisitor = visitor as ILangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCondRelop(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CondExprContext : CondContext {
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public CondExprContext(CondContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ILangListener typedListener = listener as ILangListener;
			if (typedListener != null) typedListener.EnterCondExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILangListener typedListener = listener as ILangListener;
			if (typedListener != null) typedListener.ExitCondExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILangVisitor<TResult> typedVisitor = visitor as ILangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCondExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CondAndContext : CondContext {
		public CondContext c1;
		public CondContext c2;
		public ITerminalNode AND() { return GetToken(LangParser.AND, 0); }
		public CondContext[] cond() {
			return GetRuleContexts<CondContext>();
		}
		public CondContext cond(int i) {
			return GetRuleContext<CondContext>(i);
		}
		public CondAndContext(CondContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ILangListener typedListener = listener as ILangListener;
			if (typedListener != null) typedListener.EnterCondAnd(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILangListener typedListener = listener as ILangListener;
			if (typedListener != null) typedListener.ExitCondAnd(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILangVisitor<TResult> typedVisitor = visitor as ILangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCondAnd(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CondOrContext : CondContext {
		public CondContext c1;
		public CondContext c2;
		public ITerminalNode OR() { return GetToken(LangParser.OR, 0); }
		public CondContext[] cond() {
			return GetRuleContexts<CondContext>();
		}
		public CondContext cond(int i) {
			return GetRuleContext<CondContext>(i);
		}
		public CondOrContext(CondContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ILangListener typedListener = listener as ILangListener;
			if (typedListener != null) typedListener.EnterCondOr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILangListener typedListener = listener as ILangListener;
			if (typedListener != null) typedListener.ExitCondOr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILangVisitor<TResult> typedVisitor = visitor as ILangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCondOr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CondNotContext : CondContext {
		public ITerminalNode NOT() { return GetToken(LangParser.NOT, 0); }
		public CondContext cond() {
			return GetRuleContext<CondContext>(0);
		}
		public CondNotContext(CondContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ILangListener typedListener = listener as ILangListener;
			if (typedListener != null) typedListener.EnterCondNot(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILangListener typedListener = listener as ILangListener;
			if (typedListener != null) typedListener.ExitCondNot(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILangVisitor<TResult> typedVisitor = visitor as ILangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCondNot(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CondContext cond() {
		return cond(0);
	}

	private CondContext cond(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		CondContext _localctx = new CondContext(Context, _parentState);
		CondContext _prevctx = _localctx;
		int _startState = 30;
		EnterRecursionRule(_localctx, 30, RULE_cond, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 187;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,13,Context) ) {
			case 1:
				{
				_localctx = new CondExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 180; expr();
				}
				break;
			case 2:
				{
				_localctx = new CondRelopContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 181; ((CondRelopContext)_localctx).e1 = expr();
				State = 182;
				((CondRelopContext)_localctx).RELOP = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << EQ) | (1L << LT) | (1L << GT) | (1L << LE) | (1L << GE) | (1L << NE))) != 0)) ) {
					((CondRelopContext)_localctx).RELOP = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 183; ((CondRelopContext)_localctx).e2 = expr();
				}
				break;
			case 3:
				{
				_localctx = new CondNotContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 185; Match(NOT);
				State = 186; cond(1);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 197;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,15,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 195;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,14,Context) ) {
					case 1:
						{
						_localctx = new CondAndContext(new CondContext(_parentctx, _parentState));
						((CondAndContext)_localctx).c1 = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_cond);
						State = 189;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 190; Match(AND);
						State = 191; ((CondAndContext)_localctx).c2 = cond(4);
						}
						break;
					case 2:
						{
						_localctx = new CondOrContext(new CondContext(_parentctx, _parentState));
						((CondOrContext)_localctx).c1 = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_cond);
						State = 192;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 193; Match(OR);
						State = 194; ((CondOrContext)_localctx).c2 = cond(3);
						}
						break;
					}
					} 
				}
				State = 199;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,15,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class AtribContext : ParserRuleContext {
		public AtribContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_atrib; } }
	 
		public AtribContext() { }
		public virtual void CopyFrom(AtribContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class AtribVarEmptyContext : AtribContext {
		public TipoContext tipo() {
			return GetRuleContext<TipoContext>(0);
		}
		public ITerminalNode VAR() { return GetToken(LangParser.VAR, 0); }
		public AtribVarEmptyContext(AtribContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ILangListener typedListener = listener as ILangListener;
			if (typedListener != null) typedListener.EnterAtribVarEmpty(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILangListener typedListener = listener as ILangListener;
			if (typedListener != null) typedListener.ExitAtribVarEmpty(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILangVisitor<TResult> typedVisitor = visitor as ILangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAtribVarEmpty(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AtribStrContext : AtribContext {
		public TipoContext tipo() {
			return GetRuleContext<TipoContext>(0);
		}
		public ITerminalNode VAR() { return GetToken(LangParser.VAR, 0); }
		public ITerminalNode AT() { return GetToken(LangParser.AT, 0); }
		public ITerminalNode STR() { return GetToken(LangParser.STR, 0); }
		public AtribStrContext(AtribContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ILangListener typedListener = listener as ILangListener;
			if (typedListener != null) typedListener.EnterAtribStr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILangListener typedListener = listener as ILangListener;
			if (typedListener != null) typedListener.ExitAtribStr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILangVisitor<TResult> typedVisitor = visitor as ILangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAtribStr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AtribVarContext : AtribContext {
		public TipoContext tipo() {
			return GetRuleContext<TipoContext>(0);
		}
		public ITerminalNode VAR() { return GetToken(LangParser.VAR, 0); }
		public ITerminalNode AT() { return GetToken(LangParser.AT, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public AtribVarContext(AtribContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ILangListener typedListener = listener as ILangListener;
			if (typedListener != null) typedListener.EnterAtribVar(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILangListener typedListener = listener as ILangListener;
			if (typedListener != null) typedListener.ExitAtribVar(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILangVisitor<TResult> typedVisitor = visitor as ILangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAtribVar(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AtribContext atrib() {
		AtribContext _localctx = new AtribContext(Context, State);
		EnterRule(_localctx, 32, RULE_atrib);
		try {
			State = 213;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,16,Context) ) {
			case 1:
				_localctx = new AtribVarContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 200; tipo();
				State = 201; Match(VAR);
				State = 202; Match(AT);
				State = 203; expr();
				}
				break;
			case 2:
				_localctx = new AtribStrContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 205; tipo();
				State = 206; Match(VAR);
				State = 207; Match(AT);
				State = 208; Match(STR);
				}
				break;
			case 3:
				_localctx = new AtribVarEmptyContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 210; tipo();
				State = 211; Match(VAR);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TipoContext : ParserRuleContext {
		public TipoContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tipo; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILangListener typedListener = listener as ILangListener;
			if (typedListener != null) typedListener.EnterTipo(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILangListener typedListener = listener as ILangListener;
			if (typedListener != null) typedListener.ExitTipo(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILangVisitor<TResult> typedVisitor = visitor as ILangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTipo(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TipoContext tipo() {
		TipoContext _localctx = new TipoContext(Context, State);
		EnterRule(_localctx, 34, RULE_tipo);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 215;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__1) | (1L << T__2))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprContext : ParserRuleContext {
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
	 
		public ExprContext() { }
		public virtual void CopyFrom(ExprContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ExprPlusContext : ExprContext {
		public TermContext term() {
			return GetRuleContext<TermContext>(0);
		}
		public ITerminalNode PLUS() { return GetToken(LangParser.PLUS, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ExprPlusContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ILangListener typedListener = listener as ILangListener;
			if (typedListener != null) typedListener.EnterExprPlus(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILangListener typedListener = listener as ILangListener;
			if (typedListener != null) typedListener.ExitExprPlus(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILangVisitor<TResult> typedVisitor = visitor as ILangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExprPlus(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExprMinusContext : ExprContext {
		public TermContext term() {
			return GetRuleContext<TermContext>(0);
		}
		public ITerminalNode MINUS() { return GetToken(LangParser.MINUS, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ExprMinusContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ILangListener typedListener = listener as ILangListener;
			if (typedListener != null) typedListener.EnterExprMinus(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILangListener typedListener = listener as ILangListener;
			if (typedListener != null) typedListener.ExitExprMinus(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILangVisitor<TResult> typedVisitor = visitor as ILangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExprMinus(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExprTermContext : ExprContext {
		public TermContext term() {
			return GetRuleContext<TermContext>(0);
		}
		public ExprTermContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ILangListener typedListener = listener as ILangListener;
			if (typedListener != null) typedListener.EnterExprTerm(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILangListener typedListener = listener as ILangListener;
			if (typedListener != null) typedListener.ExitExprTerm(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILangVisitor<TResult> typedVisitor = visitor as ILangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExprTerm(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		ExprContext _localctx = new ExprContext(Context, State);
		EnterRule(_localctx, 36, RULE_expr);
		try {
			State = 226;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,17,Context) ) {
			case 1:
				_localctx = new ExprPlusContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 217; term();
				State = 218; Match(PLUS);
				State = 219; expr();
				}
				break;
			case 2:
				_localctx = new ExprMinusContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 221; term();
				State = 222; Match(MINUS);
				State = 223; expr();
				}
				break;
			case 3:
				_localctx = new ExprTermContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 225; term();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TermContext : ParserRuleContext {
		public TermContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_term; } }
	 
		public TermContext() { }
		public virtual void CopyFrom(TermContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class TermDivContext : TermContext {
		public FactorContext factor() {
			return GetRuleContext<FactorContext>(0);
		}
		public ITerminalNode DIV() { return GetToken(LangParser.DIV, 0); }
		public TermContext term() {
			return GetRuleContext<TermContext>(0);
		}
		public TermDivContext(TermContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ILangListener typedListener = listener as ILangListener;
			if (typedListener != null) typedListener.EnterTermDiv(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILangListener typedListener = listener as ILangListener;
			if (typedListener != null) typedListener.ExitTermDiv(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILangVisitor<TResult> typedVisitor = visitor as ILangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTermDiv(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TermMultContext : TermContext {
		public FactorContext factor() {
			return GetRuleContext<FactorContext>(0);
		}
		public ITerminalNode MULT() { return GetToken(LangParser.MULT, 0); }
		public TermContext term() {
			return GetRuleContext<TermContext>(0);
		}
		public TermMultContext(TermContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ILangListener typedListener = listener as ILangListener;
			if (typedListener != null) typedListener.EnterTermMult(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILangListener typedListener = listener as ILangListener;
			if (typedListener != null) typedListener.ExitTermMult(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILangVisitor<TResult> typedVisitor = visitor as ILangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTermMult(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TermFactorContext : TermContext {
		public FactorContext factor() {
			return GetRuleContext<FactorContext>(0);
		}
		public TermFactorContext(TermContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ILangListener typedListener = listener as ILangListener;
			if (typedListener != null) typedListener.EnterTermFactor(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILangListener typedListener = listener as ILangListener;
			if (typedListener != null) typedListener.ExitTermFactor(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILangVisitor<TResult> typedVisitor = visitor as ILangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTermFactor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TermContext term() {
		TermContext _localctx = new TermContext(Context, State);
		EnterRule(_localctx, 38, RULE_term);
		try {
			State = 237;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,18,Context) ) {
			case 1:
				_localctx = new TermMultContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 228; factor();
				State = 229; Match(MULT);
				State = 230; term();
				}
				break;
			case 2:
				_localctx = new TermDivContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 232; factor();
				State = 233; Match(DIV);
				State = 234; term();
				}
				break;
			case 3:
				_localctx = new TermFactorContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 236; factor();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FactorContext : ParserRuleContext {
		public FactorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_factor; } }
	 
		public FactorContext() { }
		public virtual void CopyFrom(FactorContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class FactorNumContext : FactorContext {
		public ITerminalNode NUM() { return GetToken(LangParser.NUM, 0); }
		public FactorNumContext(FactorContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ILangListener typedListener = listener as ILangListener;
			if (typedListener != null) typedListener.EnterFactorNum(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILangListener typedListener = listener as ILangListener;
			if (typedListener != null) typedListener.ExitFactorNum(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILangVisitor<TResult> typedVisitor = visitor as ILangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFactorNum(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FactorVarContext : FactorContext {
		public ITerminalNode VAR() { return GetToken(LangParser.VAR, 0); }
		public FactorVarContext(FactorContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ILangListener typedListener = listener as ILangListener;
			if (typedListener != null) typedListener.EnterFactorVar(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILangListener typedListener = listener as ILangListener;
			if (typedListener != null) typedListener.ExitFactorVar(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILangVisitor<TResult> typedVisitor = visitor as ILangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFactorVar(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FactorExprContext : FactorContext {
		public ITerminalNode OE() { return GetToken(LangParser.OE, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode CE() { return GetToken(LangParser.CE, 0); }
		public FactorExprContext(FactorContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ILangListener typedListener = listener as ILangListener;
			if (typedListener != null) typedListener.EnterFactorExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILangListener typedListener = listener as ILangListener;
			if (typedListener != null) typedListener.ExitFactorExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILangVisitor<TResult> typedVisitor = visitor as ILangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFactorExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FactorContext factor() {
		FactorContext _localctx = new FactorContext(Context, State);
		EnterRule(_localctx, 40, RULE_factor);
		try {
			State = 245;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OE:
				_localctx = new FactorExprContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 239; Match(OE);
				State = 240; expr();
				State = 241; Match(CE);
				}
				break;
			case VAR:
				_localctx = new FactorVarContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 243; Match(VAR);
				}
				break;
			case NUM:
				_localctx = new FactorNumContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 244; Match(NUM);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 15: return cond_sempred((CondContext)_localctx, predIndex);
		}
		return true;
	}
	private bool cond_sempred(CondContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 3);
		case 1: return Precpred(Context, 2);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '*', '\xFA', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x3', '\x2', '\x3', '\x2', '\x6', '\x2', '/', '\n', 
		'\x2', '\r', '\x2', '\xE', '\x2', '\x30', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x5', '\x3', '\x37', '\n', '\x3', '\x3', 
		'\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x4', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x5', '\x6', 'N', '\n', '\x6', '\x3', '\a', '\x3', '\a', '\x3', 
		'\a', '\x3', '\a', '\x3', '\a', '\x5', '\a', 'U', '\n', '\a', '\x3', '\b', 
		'\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\t', '\x3', 
		'\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', 
		'\x5', '\t', '\x63', '\n', '\t', '\x3', '\n', '\x3', '\n', '\x3', '\n', 
		'\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', 
		'\n', '\x3', '\n', '\x5', '\n', 'o', '\n', '\n', '\x3', '\v', '\x3', '\v', 
		'\x3', '\v', '\x3', '\v', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', 
		'\f', '\x3', '\f', '\x3', '\f', '\x5', '\f', '{', '\n', '\f', '\x3', '\r', 
		'\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', 
		'\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', 
		'\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x5', '\r', '\x8D', 
		'\n', '\r', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', 
		'\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', 
		'\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x5', '\xE', '\x9C', 
		'\n', '\xE', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x5', '\xF', '\xA1', 
		'\n', '\xF', '\x3', '\xF', '\x3', '\xF', '\x5', '\xF', '\xA5', '\n', '\xF', 
		'\x3', '\xF', '\x3', '\xF', '\x5', '\xF', '\xA9', '\n', '\xF', '\x3', 
		'\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\x10', '\x3', '\x10', '\x6', 
		'\x10', '\xB0', '\n', '\x10', '\r', '\x10', '\xE', '\x10', '\xB1', '\x3', 
		'\x10', '\x3', '\x10', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', 
		'\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x5', 
		'\x11', '\xBE', '\n', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', 
		'\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\a', '\x11', '\xC6', '\n', 
		'\x11', '\f', '\x11', '\xE', '\x11', '\xC9', '\v', '\x11', '\x3', '\x12', 
		'\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', 
		'\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', 
		'\x3', '\x12', '\x3', '\x12', '\x5', '\x12', '\xD8', '\n', '\x12', '\x3', 
		'\x13', '\x3', '\x13', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', 
		'\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', 
		'\x14', '\x5', '\x14', '\xE5', '\n', '\x14', '\x3', '\x15', '\x3', '\x15', 
		'\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', 
		'\x3', '\x15', '\x3', '\x15', '\x5', '\x15', '\xF0', '\n', '\x15', '\x3', 
		'\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', 
		'\x16', '\x5', '\x16', '\xF8', '\n', '\x16', '\x3', '\x16', '\x2', '\x3', 
		' ', '\x17', '\x2', '\x4', '\x6', '\b', '\n', '\f', '\xE', '\x10', '\x12', 
		'\x14', '\x16', '\x18', '\x1A', '\x1C', '\x1E', ' ', '\"', '$', '&', '(', 
		'*', '\x2', '\x4', '\x3', '\x2', '\x13', '\x18', '\x3', '\x2', '\x3', 
		'\x5', '\x2', '\x106', '\x2', ',', '\x3', '\x2', '\x2', '\x2', '\x4', 
		'\x36', '\x3', '\x2', '\x2', '\x2', '\x6', '\x38', '\x3', '\x2', '\x2', 
		'\x2', '\b', '?', '\x3', '\x2', '\x2', '\x2', '\n', 'M', '\x3', '\x2', 
		'\x2', '\x2', '\f', 'T', '\x3', '\x2', '\x2', '\x2', '\xE', 'V', '\x3', 
		'\x2', '\x2', '\x2', '\x10', '\x62', '\x3', '\x2', '\x2', '\x2', '\x12', 
		'n', '\x3', '\x2', '\x2', '\x2', '\x14', 'p', '\x3', '\x2', '\x2', '\x2', 
		'\x16', 'z', '\x3', '\x2', '\x2', '\x2', '\x18', '\x8C', '\x3', '\x2', 
		'\x2', '\x2', '\x1A', '\x9B', '\x3', '\x2', '\x2', '\x2', '\x1C', '\x9D', 
		'\x3', '\x2', '\x2', '\x2', '\x1E', '\xAD', '\x3', '\x2', '\x2', '\x2', 
		' ', '\xBD', '\x3', '\x2', '\x2', '\x2', '\"', '\xD7', '\x3', '\x2', '\x2', 
		'\x2', '$', '\xD9', '\x3', '\x2', '\x2', '\x2', '&', '\xE4', '\x3', '\x2', 
		'\x2', '\x2', '(', '\xEF', '\x3', '\x2', '\x2', '\x2', '*', '\xF7', '\x3', 
		'\x2', '\x2', '\x2', ',', '.', '\x5', '\x4', '\x3', '\x2', '-', '/', '\x5', 
		'\x10', '\t', '\x2', '.', '-', '\x3', '\x2', '\x2', '\x2', '/', '\x30', 
		'\x3', '\x2', '\x2', '\x2', '\x30', '.', '\x3', '\x2', '\x2', '\x2', '\x30', 
		'\x31', '\x3', '\x2', '\x2', '\x2', '\x31', '\x3', '\x3', '\x2', '\x2', 
		'\x2', '\x32', '\x33', '\x5', '\x6', '\x4', '\x2', '\x33', '\x34', '\x5', 
		'\x4', '\x3', '\x2', '\x34', '\x37', '\x3', '\x2', '\x2', '\x2', '\x35', 
		'\x37', '\x3', '\x2', '\x2', '\x2', '\x36', '\x32', '\x3', '\x2', '\x2', 
		'\x2', '\x36', '\x35', '\x3', '\x2', '\x2', '\x2', '\x37', '\x5', '\x3', 
		'\x2', '\x2', '\x2', '\x38', '\x39', '\a', '\x1B', '\x2', '\x2', '\x39', 
		':', '\a', '(', '\x2', '\x2', ':', ';', '\a', '\a', '\x2', '\x2', ';', 
		'<', '\x5', '\f', '\a', '\x2', '<', '=', '\a', '\b', '\x2', '\x2', '=', 
		'>', '\x5', '\b', '\x5', '\x2', '>', '\a', '\x3', '\x2', '\x2', '\x2', 
		'?', '@', '\a', '\t', '\x2', '\x2', '@', '\x41', '\x5', '\n', '\x6', '\x2', 
		'\x41', '\x42', '\a', '\n', '\x2', '\x2', '\x42', '\t', '\x3', '\x2', 
		'\x2', '\x2', '\x43', 'N', '\x5', '\x10', '\t', '\x2', '\x44', '\x45', 
		'\x5', '\x10', '\t', '\x2', '\x45', '\x46', '\x5', '\n', '\x6', '\x2', 
		'\x46', 'N', '\x3', '\x2', '\x2', '\x2', 'G', 'H', '\a', '\x1C', '\x2', 
		'\x2', 'H', 'I', '\x5', '&', '\x14', '\x2', 'I', 'J', '\a', '&', '\x2', 
		'\x2', 'J', 'N', '\x3', '\x2', '\x2', '\x2', 'K', 'L', '\a', '\x1C', '\x2', 
		'\x2', 'L', 'N', '\a', '&', '\x2', '\x2', 'M', '\x43', '\x3', '\x2', '\x2', 
		'\x2', 'M', '\x44', '\x3', '\x2', '\x2', '\x2', 'M', 'G', '\x3', '\x2', 
		'\x2', '\x2', 'M', 'K', '\x3', '\x2', '\x2', '\x2', 'N', '\v', '\x3', 
		'\x2', '\x2', '\x2', 'O', 'U', '\a', '(', '\x2', '\x2', 'P', 'Q', '\a', 
		'(', '\x2', '\x2', 'Q', 'R', '\a', '\x6', '\x2', '\x2', 'R', 'U', '\x5', 
		'\f', '\a', '\x2', 'S', 'U', '\x3', '\x2', '\x2', '\x2', 'T', 'O', '\x3', 
		'\x2', '\x2', '\x2', 'T', 'P', '\x3', '\x2', '\x2', '\x2', 'T', 'S', '\x3', 
		'\x2', '\x2', '\x2', 'U', '\r', '\x3', '\x2', '\x2', '\x2', 'V', 'W', 
		'\a', '(', '\x2', '\x2', 'W', 'X', '\a', '\a', '\x2', '\x2', 'X', 'Y', 
		'\x5', '\f', '\a', '\x2', 'Y', 'Z', '\a', '\b', '\x2', '\x2', 'Z', '\xF', 
		'\x3', '\x2', '\x2', '\x2', '[', '\\', '\x5', '\x12', '\n', '\x2', '\\', 
		']', '\a', '&', '\x2', '\x2', ']', '\x63', '\x3', '\x2', '\x2', '\x2', 
		'^', '\x63', '\x5', '\x18', '\r', '\x2', '_', '\x63', '\x5', '\x1A', '\xE', 
		'\x2', '`', '\x63', '\x5', '\x1C', '\xF', '\x2', '\x61', '\x63', '\a', 
		'&', '\x2', '\x2', '\x62', '[', '\x3', '\x2', '\x2', '\x2', '\x62', '^', 
		'\x3', '\x2', '\x2', '\x2', '\x62', '_', '\x3', '\x2', '\x2', '\x2', '\x62', 
		'`', '\x3', '\x2', '\x2', '\x2', '\x62', '\x61', '\x3', '\x2', '\x2', 
		'\x2', '\x63', '\x11', '\x3', '\x2', '\x2', '\x2', '\x64', '\x65', '\x5', 
		'\"', '\x12', '\x2', '\x65', '\x66', '\b', '\n', '\x1', '\x2', '\x66', 
		'o', '\x3', '\x2', '\x2', '\x2', 'g', 'h', '\x5', '\x14', '\v', '\x2', 
		'h', 'i', '\b', '\n', '\x1', '\x2', 'i', 'o', '\x3', '\x2', '\x2', '\x2', 
		'j', 'k', '\x5', '\x16', '\f', '\x2', 'k', 'l', '\b', '\n', '\x1', '\x2', 
		'l', 'o', '\x3', '\x2', '\x2', '\x2', 'm', 'o', '\x5', '\xE', '\b', '\x2', 
		'n', '\x64', '\x3', '\x2', '\x2', '\x2', 'n', 'g', '\x3', '\x2', '\x2', 
		'\x2', 'n', 'j', '\x3', '\x2', '\x2', '\x2', 'n', 'm', '\x3', '\x2', '\x2', 
		'\x2', 'o', '\x13', '\x3', '\x2', '\x2', '\x2', 'p', 'q', '\x5', '$', 
		'\x13', '\x2', 'q', 'r', '\a', '$', '\x2', '\x2', 'r', 's', '\a', '(', 
		'\x2', '\x2', 's', '\x15', '\x3', '\x2', '\x2', '\x2', 't', 'u', '\a', 
		'#', '\x2', '\x2', 'u', '{', '\a', '(', '\x2', '\x2', 'v', 'w', '\a', 
		'#', '\x2', '\x2', 'w', '{', '\a', '%', '\x2', '\x2', 'x', 'y', '\a', 
		'#', '\x2', '\x2', 'y', '{', '\x5', '&', '\x14', '\x2', 'z', 't', '\x3', 
		'\x2', '\x2', '\x2', 'z', 'v', '\x3', '\x2', '\x2', '\x2', 'z', 'x', '\x3', 
		'\x2', '\x2', '\x2', '{', '\x17', '\x3', '\x2', '\x2', '\x2', '|', '}', 
		'\a', '\x1D', '\x2', '\x2', '}', '~', '\a', '\a', '\x2', '\x2', '~', '\x7F', 
		'\x5', ' ', '\x11', '\x2', '\x7F', '\x80', '\a', '\b', '\x2', '\x2', '\x80', 
		'\x81', '\a', '!', '\x2', '\x2', '\x81', '\x82', '\x5', '\x1E', '\x10', 
		'\x2', '\x82', '\x8D', '\x3', '\x2', '\x2', '\x2', '\x83', '\x84', '\a', 
		'\x1D', '\x2', '\x2', '\x84', '\x85', '\a', '\a', '\x2', '\x2', '\x85', 
		'\x86', '\x5', ' ', '\x11', '\x2', '\x86', '\x87', '\a', '\b', '\x2', 
		'\x2', '\x87', '\x88', '\a', '!', '\x2', '\x2', '\x88', '\x89', '\x5', 
		'\x1E', '\x10', '\x2', '\x89', '\x8A', '\a', '\"', '\x2', '\x2', '\x8A', 
		'\x8B', '\x5', '\x1E', '\x10', '\x2', '\x8B', '\x8D', '\x3', '\x2', '\x2', 
		'\x2', '\x8C', '|', '\x3', '\x2', '\x2', '\x2', '\x8C', '\x83', '\x3', 
		'\x2', '\x2', '\x2', '\x8D', '\x19', '\x3', '\x2', '\x2', '\x2', '\x8E', 
		'\x8F', '\a', '\x1E', '\x2', '\x2', '\x8F', '\x90', '\a', '\a', '\x2', 
		'\x2', '\x90', '\x91', '\x5', ' ', '\x11', '\x2', '\x91', '\x92', '\a', 
		'\b', '\x2', '\x2', '\x92', '\x93', '\x5', '\x1E', '\x10', '\x2', '\x93', 
		'\x9C', '\x3', '\x2', '\x2', '\x2', '\x94', '\x95', '\a', '\x1F', '\x2', 
		'\x2', '\x95', '\x96', '\x5', '\x1E', '\x10', '\x2', '\x96', '\x97', '\a', 
		'\x1E', '\x2', '\x2', '\x97', '\x98', '\a', '\a', '\x2', '\x2', '\x98', 
		'\x99', '\x5', ' ', '\x11', '\x2', '\x99', '\x9A', '\a', '\b', '\x2', 
		'\x2', '\x9A', '\x9C', '\x3', '\x2', '\x2', '\x2', '\x9B', '\x8E', '\x3', 
		'\x2', '\x2', '\x2', '\x9B', '\x94', '\x3', '\x2', '\x2', '\x2', '\x9C', 
		'\x1B', '\x3', '\x2', '\x2', '\x2', '\x9D', '\x9E', '\a', ' ', '\x2', 
		'\x2', '\x9E', '\xA0', '\a', '\a', '\x2', '\x2', '\x9F', '\xA1', '\x5', 
		'\"', '\x12', '\x2', '\xA0', '\x9F', '\x3', '\x2', '\x2', '\x2', '\xA0', 
		'\xA1', '\x3', '\x2', '\x2', '\x2', '\xA1', '\xA2', '\x3', '\x2', '\x2', 
		'\x2', '\xA2', '\xA4', '\a', '&', '\x2', '\x2', '\xA3', '\xA5', '\x5', 
		' ', '\x11', '\x2', '\xA4', '\xA3', '\x3', '\x2', '\x2', '\x2', '\xA4', 
		'\xA5', '\x3', '\x2', '\x2', '\x2', '\xA5', '\xA6', '\x3', '\x2', '\x2', 
		'\x2', '\xA6', '\xA8', '\a', '&', '\x2', '\x2', '\xA7', '\xA9', '\x5', 
		'\"', '\x12', '\x2', '\xA8', '\xA7', '\x3', '\x2', '\x2', '\x2', '\xA8', 
		'\xA9', '\x3', '\x2', '\x2', '\x2', '\xA9', '\xAA', '\x3', '\x2', '\x2', 
		'\x2', '\xAA', '\xAB', '\a', '\b', '\x2', '\x2', '\xAB', '\xAC', '\x5', 
		'\x1E', '\x10', '\x2', '\xAC', '\x1D', '\x3', '\x2', '\x2', '\x2', '\xAD', 
		'\xAF', '\a', '\t', '\x2', '\x2', '\xAE', '\xB0', '\x5', '\x10', '\t', 
		'\x2', '\xAF', '\xAE', '\x3', '\x2', '\x2', '\x2', '\xB0', '\xB1', '\x3', 
		'\x2', '\x2', '\x2', '\xB1', '\xAF', '\x3', '\x2', '\x2', '\x2', '\xB1', 
		'\xB2', '\x3', '\x2', '\x2', '\x2', '\xB2', '\xB3', '\x3', '\x2', '\x2', 
		'\x2', '\xB3', '\xB4', '\a', '\n', '\x2', '\x2', '\xB4', '\x1F', '\x3', 
		'\x2', '\x2', '\x2', '\xB5', '\xB6', '\b', '\x11', '\x1', '\x2', '\xB6', 
		'\xBE', '\x5', '&', '\x14', '\x2', '\xB7', '\xB8', '\x5', '&', '\x14', 
		'\x2', '\xB8', '\xB9', '\t', '\x2', '\x2', '\x2', '\xB9', '\xBA', '\x5', 
		'&', '\x14', '\x2', '\xBA', '\xBE', '\x3', '\x2', '\x2', '\x2', '\xBB', 
		'\xBC', '\a', '\x12', '\x2', '\x2', '\xBC', '\xBE', '\x5', ' ', '\x11', 
		'\x3', '\xBD', '\xB5', '\x3', '\x2', '\x2', '\x2', '\xBD', '\xB7', '\x3', 
		'\x2', '\x2', '\x2', '\xBD', '\xBB', '\x3', '\x2', '\x2', '\x2', '\xBE', 
		'\xC7', '\x3', '\x2', '\x2', '\x2', '\xBF', '\xC0', '\f', '\x5', '\x2', 
		'\x2', '\xC0', '\xC1', '\a', '\x10', '\x2', '\x2', '\xC1', '\xC6', '\x5', 
		' ', '\x11', '\x6', '\xC2', '\xC3', '\f', '\x4', '\x2', '\x2', '\xC3', 
		'\xC4', '\a', '\x11', '\x2', '\x2', '\xC4', '\xC6', '\x5', ' ', '\x11', 
		'\x5', '\xC5', '\xBF', '\x3', '\x2', '\x2', '\x2', '\xC5', '\xC2', '\x3', 
		'\x2', '\x2', '\x2', '\xC6', '\xC9', '\x3', '\x2', '\x2', '\x2', '\xC7', 
		'\xC5', '\x3', '\x2', '\x2', '\x2', '\xC7', '\xC8', '\x3', '\x2', '\x2', 
		'\x2', '\xC8', '!', '\x3', '\x2', '\x2', '\x2', '\xC9', '\xC7', '\x3', 
		'\x2', '\x2', '\x2', '\xCA', '\xCB', '\x5', '$', '\x13', '\x2', '\xCB', 
		'\xCC', '\a', '(', '\x2', '\x2', '\xCC', '\xCD', '\a', '\v', '\x2', '\x2', 
		'\xCD', '\xCE', '\x5', '&', '\x14', '\x2', '\xCE', '\xD8', '\x3', '\x2', 
		'\x2', '\x2', '\xCF', '\xD0', '\x5', '$', '\x13', '\x2', '\xD0', '\xD1', 
		'\a', '(', '\x2', '\x2', '\xD1', '\xD2', '\a', '\v', '\x2', '\x2', '\xD2', 
		'\xD3', '\a', '%', '\x2', '\x2', '\xD3', '\xD8', '\x3', '\x2', '\x2', 
		'\x2', '\xD4', '\xD5', '\x5', '$', '\x13', '\x2', '\xD5', '\xD6', '\a', 
		'(', '\x2', '\x2', '\xD6', '\xD8', '\x3', '\x2', '\x2', '\x2', '\xD7', 
		'\xCA', '\x3', '\x2', '\x2', '\x2', '\xD7', '\xCF', '\x3', '\x2', '\x2', 
		'\x2', '\xD7', '\xD4', '\x3', '\x2', '\x2', '\x2', '\xD8', '#', '\x3', 
		'\x2', '\x2', '\x2', '\xD9', '\xDA', '\t', '\x3', '\x2', '\x2', '\xDA', 
		'%', '\x3', '\x2', '\x2', '\x2', '\xDB', '\xDC', '\x5', '(', '\x15', '\x2', 
		'\xDC', '\xDD', '\a', '\f', '\x2', '\x2', '\xDD', '\xDE', '\x5', '&', 
		'\x14', '\x2', '\xDE', '\xE5', '\x3', '\x2', '\x2', '\x2', '\xDF', '\xE0', 
		'\x5', '(', '\x15', '\x2', '\xE0', '\xE1', '\a', '\r', '\x2', '\x2', '\xE1', 
		'\xE2', '\x5', '&', '\x14', '\x2', '\xE2', '\xE5', '\x3', '\x2', '\x2', 
		'\x2', '\xE3', '\xE5', '\x5', '(', '\x15', '\x2', '\xE4', '\xDB', '\x3', 
		'\x2', '\x2', '\x2', '\xE4', '\xDF', '\x3', '\x2', '\x2', '\x2', '\xE4', 
		'\xE3', '\x3', '\x2', '\x2', '\x2', '\xE5', '\'', '\x3', '\x2', '\x2', 
		'\x2', '\xE6', '\xE7', '\x5', '*', '\x16', '\x2', '\xE7', '\xE8', '\a', 
		'\xE', '\x2', '\x2', '\xE8', '\xE9', '\x5', '(', '\x15', '\x2', '\xE9', 
		'\xF0', '\x3', '\x2', '\x2', '\x2', '\xEA', '\xEB', '\x5', '*', '\x16', 
		'\x2', '\xEB', '\xEC', '\a', '\xF', '\x2', '\x2', '\xEC', '\xED', '\x5', 
		'(', '\x15', '\x2', '\xED', '\xF0', '\x3', '\x2', '\x2', '\x2', '\xEE', 
		'\xF0', '\x5', '*', '\x16', '\x2', '\xEF', '\xE6', '\x3', '\x2', '\x2', 
		'\x2', '\xEF', '\xEA', '\x3', '\x2', '\x2', '\x2', '\xEF', '\xEE', '\x3', 
		'\x2', '\x2', '\x2', '\xF0', ')', '\x3', '\x2', '\x2', '\x2', '\xF1', 
		'\xF2', '\a', '\a', '\x2', '\x2', '\xF2', '\xF3', '\x5', '&', '\x14', 
		'\x2', '\xF3', '\xF4', '\a', '\b', '\x2', '\x2', '\xF4', '\xF8', '\x3', 
		'\x2', '\x2', '\x2', '\xF5', '\xF8', '\a', '(', '\x2', '\x2', '\xF6', 
		'\xF8', '\a', '\'', '\x2', '\x2', '\xF7', '\xF1', '\x3', '\x2', '\x2', 
		'\x2', '\xF7', '\xF5', '\x3', '\x2', '\x2', '\x2', '\xF7', '\xF6', '\x3', 
		'\x2', '\x2', '\x2', '\xF8', '+', '\x3', '\x2', '\x2', '\x2', '\x16', 
		'\x30', '\x36', 'M', 'T', '\x62', 'n', 'z', '\x8C', '\x9B', '\xA0', '\xA4', 
		'\xA8', '\xB1', '\xBD', '\xC5', '\xC7', '\xD7', '\xE4', '\xEF', '\xF7',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace Grammar
